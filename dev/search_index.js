var documenterSearchIndex = {"docs":
[{"location":"#QuantumAlgebra.jl-1","page":"Home","title":"QuantumAlgebra.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [QuantumAlgebra]","category":"page"},{"location":"#QuantumAlgebra.Corr","page":"Home","title":"QuantumAlgebra.Corr","text":"Corr(A::Operator)\n\nRepresents correlations of operator A. A should be a product for this to make sense, in which case AB_c = AB - AB, with corresponding extensions for products of more operators.\n\nSee also: ascorr\n\n\n\n\n\n","category":"type"},{"location":"#QuantumAlgebra.ExpVal","page":"Home","title":"QuantumAlgebra.ExpVal","text":"ExpVal(A::Operator): represent expectation value A\n\n\n\n\n\n","category":"type"},{"location":"#QuantumAlgebra.OpSumAnalytic","page":"Home","title":"QuantumAlgebra.OpSumAnalytic","text":"OpSumAnalytic(i::Symbol,A::Operator): represent sum_i A, with all possible values of i assumed to be included\n\n\n\n\n\n","category":"type"},{"location":"#QuantumAlgebra.a","page":"Home","title":"QuantumAlgebra.a","text":"a(n): represent bosonic annihilation operator a_n for mode n\n\n\n\n\n\n","category":"type"},{"location":"#QuantumAlgebra.adag","page":"Home","title":"QuantumAlgebra.adag","text":"adag(n): represent bosonic creation operator a^_n for mode n\n\n\n\n\n\n","category":"type"},{"location":"#QuantumAlgebra.param","page":"Home","title":"QuantumAlgebra.param","text":"param(g,(:i,:j),'n'): represent a scalar named parameter g_ij. state can be purely real ('r'), not conjugated ('n'), or conjugated ('c')\n\n\n\n\n\n","category":"type"},{"location":"#QuantumAlgebra.scal","page":"Home","title":"QuantumAlgebra.scal","text":"Represent a scalar value (i.e., a number)\n\n\n\n\n\n","category":"type"},{"location":"#QuantumAlgebra.σ","page":"Home","title":"QuantumAlgebra.σ","text":"σ(a,n): represent Pauli matrix σ_an for two-level system (TLS) n, where a  xyz or 123 is the type of Pauli matrix.\n\n\n\n\n\n","category":"type"},{"location":"#QuantumAlgebra.Avac","page":"Home","title":"QuantumAlgebra.Avac","text":"Avac(A::Operator), vacA(A::Operator)\n\nSimplify operator by assuming it is applied to the vacuum from the left or right, respectively. To be precise, Avac(A) returns A such that A0 = A0, while vacA(A) does the same for 0A.\n\n\n\n\n\n","category":"function"},{"location":"#QuantumAlgebra.ascorr","page":"Home","title":"QuantumAlgebra.ascorr","text":"ascorr(expr::Operator)\n\nTake an expression expr=A B C + D E... and write its expectation value in terms of single-body expectation values A B ldots, and many-body correlations AB_c ABC_c, etc. Currently, up to fourth-order correlations (i.e., products of four operators) are supported.\n\nE.g., ascorr(adag(:n)*a(:n)) returns a^dagger_n a_n_c + a^dagger_n a_n (which is equal to a^dagger_n a_n), while ascorr(adag(:n)*a(:m)*a(:n)) returns langle a_n^dagger a_m a_n rangle_c + langle a_n^dagger rangle langle a_m rangle langle a_n rangle + langle a_n^dagger rangle langle a_m a_n rangle_c + langle a_m rangle langle a_n^dagger a_n rangle_c + langle a_n rangle langle a_n^dagger a_m rangle_c.\n\nSee also: ExpVal, Corr\n\n\n\n\n\n","category":"function"},{"location":"#QuantumAlgebra.vacA","page":"Home","title":"QuantumAlgebra.vacA","text":"Avac(A::Operator), vacA(A::Operator)\n\nSimplify operator by assuming it is applied to the vacuum from the left or right, respectively. To be precise, Avac(A) returns A such that A0 = A0, while vacA(A) does the same for 0A.\n\n\n\n\n\n","category":"function"},{"location":"#QuantumAlgebra.vacExpVal","page":"Home","title":"QuantumAlgebra.vacExpVal","text":"vacExpVal(A::Operator,S::Operator=scal(1))\n\nCalculate the vacuum expectation value 0S^dagger A S0, i.e., the expectation value ψAψ for the state defined by ψ= S0`.\n\n\n\n\n\n","category":"function"},{"location":"#QuantumAlgebra.σm-Tuple{Any}","page":"Home","title":"QuantumAlgebra.σm","text":"σm(n): construct σ^-_n = frac12 σ_xn - fraci2 σ_yn\n\n\n\n\n\n","category":"method"},{"location":"#QuantumAlgebra.σp-Tuple{Any}","page":"Home","title":"QuantumAlgebra.σp","text":"σp(n): construct σ^+_n = frac12 σ_xn + fraci2 σ_yn\n\n\n\n\n\n","category":"method"},{"location":"#QuantumAlgebra.σx-Tuple{Any}","page":"Home","title":"QuantumAlgebra.σx","text":"σx(n): construct σ_xn\n\n\n\n\n\n","category":"method"},{"location":"#QuantumAlgebra.σy-Tuple{Any}","page":"Home","title":"QuantumAlgebra.σy","text":"σy(n): construct σ_yn\n\n\n\n\n\n","category":"method"},{"location":"#QuantumAlgebra.σz-Tuple{Any}","page":"Home","title":"QuantumAlgebra.σz","text":"σz(n): construct σ_zn\n\n\n\n\n\n","category":"method"}]
}
