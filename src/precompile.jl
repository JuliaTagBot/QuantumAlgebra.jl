function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    Base.precompile(Tuple{Core.kwftype(typeof(Base.Sort.sort!)),NamedTuple{(:lt,),Tuple{typeof(QuantumAlgebra.CorrExpTup_isless)}},typeof(sort!),Array{Tuple{Int64,Int64},1}})
    Base.precompile(Tuple{Core.kwftype(typeof(Base.Sort.sort!)),NamedTuple{(:lt,),Tuple{typeof(QuantumAlgebra.CorrExpTup_isless)}},typeof(sort!),Array{Tuple{Int64,Vararg{Int64,N} where N},1}})
    Base.precompile(Tuple{QuantumAlgebra.var"##36#ann",Int64,Vararg{Any,N} where N})
    Base.precompile(Tuple{QuantumAlgebra.var"##36#ann",Int64})
    Base.precompile(Tuple{QuantumAlgebra.var"##36#ann",String})
    Base.precompile(Tuple{QuantumAlgebra.var"##36#ann",Symbol,Vararg{Symbol,N} where N})
    Base.precompile(Tuple{QuantumAlgebra.var"##36#ann",Symbol})
    Base.precompile(Tuple{QuantumAlgebra.var"##36#ann"})
    Base.precompile(Tuple{QuantumAlgebra.var"##37#cre",Int64,Vararg{Any,N} where N})
    Base.precompile(Tuple{QuantumAlgebra.var"##37#cre",Int64})
    Base.precompile(Tuple{QuantumAlgebra.var"##37#cre",Symbol,Vararg{Symbol,N} where N})
    Base.precompile(Tuple{QuantumAlgebra.var"##37#cre",Symbol})
    Base.precompile(Tuple{QuantumAlgebra.var"##37#cre"})
    Base.precompile(Tuple{QuantumAlgebra.var"##40#ann",Symbol})
    Base.precompile(Tuple{QuantumAlgebra.var"##40#ann"})
    Base.precompile(Tuple{QuantumAlgebra.var"##41#cre",Symbol,Vararg{Symbol,N} where N})
    Base.precompile(Tuple{QuantumAlgebra.var"##41#cre",Symbol})
    Base.precompile(Tuple{QuantumAlgebra.var"##41#cre"})
    Base.precompile(Tuple{Type{Array{Tuple{QuantumAlgebra.Operator,QuantumAlgebra.Operator},1}},UndefInitializer,Int64})
    Base.precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Axes,F,Args} where Args<:Tuple where F where Axes},Type{ExpVal},Tuple{Array{QuantumAlgebra.BosonDestroy,1}}})
    Base.precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Axes,F,Args} where Args<:Tuple where F where Axes},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{param}},Tuple{Array{QuantumAlgebra.BaseOperator,1}},Array{Any,1}}})
    Base.precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Axes,F,Args} where Args<:Tuple where F where Axes},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{scal{Int64},param}},Tuple{Array{QuantumAlgebra.BosonDestroy,1}},Array{Any,1}}})
    Base.precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Axes,F,Args} where Args<:Tuple where F where Axes},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{scal{Int64},param}},Tuple{Array{QuantumAlgebra.σ,1}},Array{Any,1}}})
    Base.precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Axes,F,Args} where Args<:Tuple where F where Axes},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{scal{Int64},param}},Tuple{Array{QuantumAlgebra.σplus,1}},Array{Any,1}}})
    Base.precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Axes,F,Args} where Args<:Tuple where F where Axes},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{scal{Int64}}},Tuple{Array{QuantumAlgebra.BosonDestroy,1}},Array{Any,1}}})
    Base.precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Axes,F,Args} where Args<:Tuple where F where Axes},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.BaseOperator,1}},Array{Any,1}}})
    Base.precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Axes,F,Args} where Args<:Tuple where F where Axes},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.BosonDestroy,1}},Array{Any,1}}})
    Base.precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Axes,F,Args} where Args<:Tuple where F where Axes},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.σ,1}},Array{Any,1}}})
    Base.precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple},Axes,F,Args} where Args<:Tuple where F where Axes},typeof(QuantumAlgebra.make_index),Tuple{Tuple{Int64,Int64,Symbol}}})
    Base.precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple},Axes,F,Args} where Args<:Tuple where F where Axes},typeof(QuantumAlgebra.make_index),Tuple{Tuple{Symbol,Symbol,Int64}}})
    Base.precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple},Axes,F,Args} where Args<:Tuple where F where Axes},typeof(QuantumAlgebra.sortsentinel),Tuple{Tuple{Int64,QuantumAlgebra.SymbolicIndex}}})
    Base.precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple},Axes,F,Args} where Args<:Tuple where F where Axes},typeof(QuantumAlgebra.sortsentinel),Tuple{Tuple{QuantumAlgebra.SymbolicIndex,QuantumAlgebra.SymbolicIndex}}})
    Base.precompile(Tuple{Type{Corr},QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{Type{Corr},scal{Int64}})
    Base.precompile(Tuple{Type{ExpVal},OpSumAnalytic})
    Base.precompile(Tuple{Type{ExpVal},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{Type{ExpVal},QuantumAlgebra.OpSum})
    Base.precompile(Tuple{Type{ExpVal},QuantumAlgebra.σminus})
    Base.precompile(Tuple{Type{ExpVal},QuantumAlgebra.σplus})
    Base.precompile(Tuple{Type{ExpVal},scal{Int64}})
    Base.precompile(Tuple{Type{OpSumAnalytic},QuantumAlgebra.SymbolicIndex,Corr})
    Base.precompile(Tuple{Type{OpSumAnalytic},QuantumAlgebra.SymbolicIndex,OpSumAnalytic})
    Base.precompile(Tuple{Type{OpSumAnalytic},QuantumAlgebra.SymbolicIndex,scal{Int64}})
    Base.precompile(Tuple{Type{OpSumAnalytic},QuantumAlgebra.SymbolicIndex,δ})
    Base.precompile(Tuple{Type{OpSumAnalytic},Symbol,Corr})
    Base.precompile(Tuple{Type{OpSumAnalytic},Symbol,OpSumAnalytic})
    Base.precompile(Tuple{Type{OpSumAnalytic},Symbol,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{Type{OpSumAnalytic},Symbol,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{Type{OpSumAnalytic},Symbol,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{Type{OpSumAnalytic},Symbol,QuantumAlgebra.σplus})
    Base.precompile(Tuple{Type{OpSumAnalytic},Symbol,QuantumAlgebra.σ})
    Base.precompile(Tuple{Type{QuantumAlgebra.OpProdIter{false}},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{Type{QuantumAlgebra.OpProdIter{true}},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{Type{QuantumAlgebra.σ},QuantumAlgebra.SpatialIndex,Symbol,Vararg{Symbol,N} where N})
    Base.precompile(Tuple{Type{param},Symbol,Char,Int64,Vararg{Union{Int64, QuantumAlgebra.SymbolicIndex, Array{Union{Int64, QuantumAlgebra.SymbolicIndex},1}, Symbol},N} where N})
    Base.precompile(Tuple{Type{param},Symbol,Char,Symbol,Vararg{Union{Int64, QuantumAlgebra.SymbolicIndex, Array{Union{Int64, QuantumAlgebra.SymbolicIndex},1}, Symbol},N} where N})
    Base.precompile(Tuple{Type{param},Symbol,Char,Tuple{Int64,Symbol}})
    Base.precompile(Tuple{Type{param},Symbol,Char,Tuple{Symbol,Int64,Symbol}})
    Base.precompile(Tuple{Type{param},Symbol,Char,Tuple{Symbol,Symbol,Int64}})
    Base.precompile(Tuple{Type{param},Symbol,Char,Tuple{}})
    Base.precompile(Tuple{Type{param},Symbol,Int64})
    Base.precompile(Tuple{Type{param},Symbol,Symbol,Vararg{Union{Int64, QuantumAlgebra.SymbolicIndex, Array{Union{Int64, QuantumAlgebra.SymbolicIndex},1}, Symbol},N} where N})
    Base.precompile(Tuple{Type{param},Symbol,Symbol})
    Base.precompile(Tuple{Type{param},Symbol,Tuple{}})
    Base.precompile(Tuple{Type{param},Symbol})
    Base.precompile(Tuple{Type{scal},Complex{Rational{Int64}}})
    Base.precompile(Tuple{Type{δ},Int64,Symbol})
    Base.precompile(Tuple{Type{δ},Symbol,Int64})
    Base.precompile(Tuple{Type{δ},Symbol,Symbol})
    Base.precompile(Tuple{typeof(!=),OpSumAnalytic,OpSumAnalytic})
    Base.precompile(Tuple{typeof(!=),QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(!=),QuantumAlgebra.OpProd,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(!=),QuantumAlgebra.OpSum,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(!=),QuantumAlgebra.OpSum,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(!=),QuantumAlgebra.σ,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(!=),Tuple{QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy},Tuple{QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy}})
    Base.precompile(Tuple{typeof(!=),scal{Complex{Rational{Int64}}},scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(!=),scal{Float64},scal{Float64}})
    Base.precompile(Tuple{typeof(!=),scal{Int64},QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(!=),scal{Int64},QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(!=),scal{Int64},QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(!=),scal{Rational{Int64}},scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(!=),δ,δ})
    Base.precompile(Tuple{typeof(*),Corr,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(*),Corr,scal{Int64}})
    Base.precompile(Tuple{typeof(*),ExpVal,Corr})
    Base.precompile(Tuple{typeof(*),ExpVal,ExpVal,ExpVal})
    Base.precompile(Tuple{typeof(*),ExpVal,ExpVal})
    Base.precompile(Tuple{typeof(*),ExpVal,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(*),ExpVal,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(*),ExpVal,QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(*),ExpVal,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),ExpVal,scal{Int64}})
    Base.precompile(Tuple{typeof(*),Float64,δ})
    Base.precompile(Tuple{typeof(*),Int64,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),Int64,param,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),Int64,param,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(*),OpSumAnalytic,OpSumAnalytic})
    Base.precompile(Tuple{typeof(*),OpSumAnalytic,param})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,Corr})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,ExpVal})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.σ,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.σplus,QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,QuantumAlgebra.OpSum,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,QuantumAlgebra.σ,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,QuantumAlgebra.σplus,QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,param})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,scal{Float64}})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,scal{Int64}})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonCreate,δ})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,Corr})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,ExpVal})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,Int64})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate,QuantumAlgebra.σ,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate,QuantumAlgebra.σ,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate,QuantumAlgebra.σ,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate,QuantumAlgebra.σminus,QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate,QuantumAlgebra.σplus,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,QuantumAlgebra.OpSum,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,QuantumAlgebra.σplus,QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,param})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,scal{Float64}})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,scal{Int64}})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.BosonDestroy,δ})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.FermionCreate,QuantumAlgebra.FermionCreate})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.FermionDestroy,QuantumAlgebra.FermionCreate})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.FermionDestroy,QuantumAlgebra.FermionDestroy})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.OpProd,Corr})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.OpProd,OpSumAnalytic})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.OpProd,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.OpProd,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.OpProd,param})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.OpSum,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.OpSum,QuantumAlgebra.OpSum,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.OpSum,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.OpSum,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σ,Corr})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σ,ExpVal})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σ,OpSumAnalytic})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σ,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σ,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σ,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σ,QuantumAlgebra.σ,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σ,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σ,scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σ,scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σ,scal{Int64}})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σ,scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σ,δ})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σminus,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σminus,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σminus,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σminus,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σminus,QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σminus,QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σminus,scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σminus,scal{Int64}})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σplus,Corr})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σplus,ExpVal})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σplus,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σplus,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σplus,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σplus,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σplus,QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σplus,QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σplus,scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(*),QuantumAlgebra.σplus,scal{Int64}})
    Base.precompile(Tuple{typeof(*),param,Corr})
    Base.precompile(Tuple{typeof(*),param,ExpVal,Corr,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,Vararg{QuantumAlgebra.BosonDestroy,N} where N})
    Base.precompile(Tuple{typeof(*),param,ExpVal,Corr,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),param,ExpVal})
    Base.precompile(Tuple{typeof(*),param,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),param,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),param,QuantumAlgebra.BosonDestroy,OpSumAnalytic})
    Base.precompile(Tuple{typeof(*),param,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate,ExpVal,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(*),param,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),param,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(*),param,QuantumAlgebra.OpSum,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),param,QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(*),param,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),param,param,param,param,param,param,Vararg{param,N} where N})
    Base.precompile(Tuple{typeof(*),param,param})
    Base.precompile(Tuple{typeof(*),param,scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(*),param,scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(*),param,scal{Int64}})
    Base.precompile(Tuple{typeof(*),param,δ})
    Base.precompile(Tuple{typeof(*),scal{Complex{Int64}},OpSumAnalytic})
    Base.precompile(Tuple{typeof(*),scal{Complex{Int64}},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(*),scal{Complex{Int64}},QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(*),scal{Complex{Int64}},QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(*),scal{Complex{Int64}},QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),scal{Complex{Int64}},scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(*),scal{Complex{Int64}},scal{Int64}})
    Base.precompile(Tuple{typeof(*),scal{Complex{Int64}},scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(*),scal{Complex{Int64}},δ,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(*),scal{Complex{Int64}},δ,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),scal{Complex{Rational{Int64}}},OpSumAnalytic})
    Base.precompile(Tuple{typeof(*),scal{Complex{Rational{Int64}}},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(*),scal{Complex{Rational{Int64}}},QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(*),scal{Complex{Rational{Int64}}},QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),scal{Complex{Rational{Int64}}},param})
    Base.precompile(Tuple{typeof(*),scal{Complex{Rational{Int64}}},scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(*),scal{Complex{Rational{Int64}}},scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(*),scal{Complex{Rational{Int64}}},scal{Int64}})
    Base.precompile(Tuple{typeof(*),scal{Complex{Rational{Int64}}},scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(*),scal{Float64},QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(*),scal{Float64},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(*),scal{Float64},scal{Float64}})
    Base.precompile(Tuple{typeof(*),scal{Float64},scal{Int64}})
    Base.precompile(Tuple{typeof(*),scal{Float64},δ})
    Base.precompile(Tuple{typeof(*),scal{Int64},ExpVal})
    Base.precompile(Tuple{typeof(*),scal{Int64},OpSumAnalytic})
    Base.precompile(Tuple{typeof(*),scal{Int64},QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),scal{Int64},QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),scal{Int64},QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),scal{Int64},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(*),scal{Int64},QuantumAlgebra.OpSum,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(*),scal{Int64},QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),scal{Int64},param,QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(*),scal{Int64},param,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),scal{Int64},param,param,ExpVal,QuantumAlgebra.σ,QuantumAlgebra.BosonCreate,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(*),scal{Int64},param,param,ExpVal,QuantumAlgebra.σplus,QuantumAlgebra.BosonCreate,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(*),scal{Int64},scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(*),scal{Int64},δ})
    Base.precompile(Tuple{typeof(*),scal{Rational{Int64}},OpSumAnalytic})
    Base.precompile(Tuple{typeof(*),scal{Rational{Int64}},QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(*),scal{Rational{Int64}},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(*),scal{Rational{Int64}},param,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),scal{Rational{Int64}},scal{Int64}})
    Base.precompile(Tuple{typeof(*),scal{Rational{Int64}},scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(*),δ,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(*),δ,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(*),δ,QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(*),δ,QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(*),δ,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),δ,scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(*),δ,scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(*),δ,scal{Float64}})
    Base.precompile(Tuple{typeof(*),δ,scal{Int64}})
    Base.precompile(Tuple{typeof(*),δ,δ,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(*),δ,δ,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(*),δ,δ})
    Base.precompile(Tuple{typeof(+),Corr,QuantumAlgebra.OpProd,QuantumAlgebra.OpProd,QuantumAlgebra.OpProd,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(+),Corr,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(+),Corr,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(+),Int64,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(+),OpSumAnalytic,OpSumAnalytic})
    Base.precompile(Tuple{typeof(+),OpSumAnalytic,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(+),OpSumAnalytic,QuantumAlgebra.OpProd,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(+),OpSumAnalytic,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(+),OpSumAnalytic,scal{Int64}})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.BosonCreate,OpSumAnalytic})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.BosonCreate,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.BosonCreate,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.BosonDestroy,Int64})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.BosonDestroy,OpSumAnalytic})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.BosonDestroy,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.BosonDestroy,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.OpProd,OpSumAnalytic})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.OpProd,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.OpProd,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.OpProd,scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.OpProd,scal{Int64}})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.OpProd,δ})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.OpSum,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.OpSum,scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.OpSum,scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.OpSum,scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(+),QuantumAlgebra.σ,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(+),scal{Complex{Int64}},OpSumAnalytic})
    Base.precompile(Tuple{typeof(+),scal{Complex{Int64}},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(+),scal{Complex{Int64}},QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(+),scal{Complex{Int64}},scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(+),scal{Complex{Rational{Int64}}},OpSumAnalytic})
    Base.precompile(Tuple{typeof(+),scal{Complex{Rational{Int64}}},QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(+),scal{Complex{Rational{Int64}}},QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(+),scal{Complex{Rational{Int64}}},scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(+),scal{Float64},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(+),scal{Float64},QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(+),scal{Float64},scal{Float64}})
    Base.precompile(Tuple{typeof(+),scal{Int64},Corr})
    Base.precompile(Tuple{typeof(+),scal{Int64},ExpVal})
    Base.precompile(Tuple{typeof(+),scal{Int64},OpSumAnalytic})
    Base.precompile(Tuple{typeof(+),scal{Int64},QuantumAlgebra.OpProd,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(+),scal{Int64},QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(+),scal{Int64},scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(+),scal{Int64},scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(+),scal{Int64},scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(+),scal{Rational{Int64}},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(+),scal{Rational{Int64}},QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(+),scal{Rational{Int64}},scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(-),Corr,Corr})
    Base.precompile(Tuple{typeof(-),Int64,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(-),OpSumAnalytic,OpSumAnalytic})
    Base.precompile(Tuple{typeof(-),OpSumAnalytic,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(-),OpSumAnalytic,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(-),OpSumAnalytic})
    Base.precompile(Tuple{typeof(-),QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(-),QuantumAlgebra.BosonDestroy,Int64})
    Base.precompile(Tuple{typeof(-),QuantumAlgebra.OpProd,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(-),QuantumAlgebra.OpProd,scal{Int64}})
    Base.precompile(Tuple{typeof(-),QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(-),QuantumAlgebra.OpSum,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(-),QuantumAlgebra.OpSum,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(-),QuantumAlgebra.OpSum,scal{Int64}})
    Base.precompile(Tuple{typeof(-),QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(-),QuantumAlgebra.σplus,QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(-),param,param})
    Base.precompile(Tuple{typeof(-),param})
    Base.precompile(Tuple{typeof(-),scal{Int64},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(-),scal{Int64},QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(-),δ,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(-),δ})
    Base.precompile(Tuple{typeof(<),NTuple{4,param},NTuple{4,param}})
    Base.precompile(Tuple{typeof(<),NTuple{4,param},Tuple{param,param,param,param,δ}})
    Base.precompile(Tuple{typeof(<),NTuple{5,param},NTuple{5,param}})
    Base.precompile(Tuple{typeof(<),NTuple{5,param},Tuple{param,param,param,param,param,δ}})
    Base.precompile(Tuple{typeof(<),QuantumAlgebra.BosonCreate,QuantumAlgebra.FermionCreate})
    Base.precompile(Tuple{typeof(<),QuantumAlgebra.BosonCreate,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(<),QuantumAlgebra.BosonDestroy,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(<),Tuple{Array{Tuple{Int64,Any},1},QuantumAlgebra.SpatialIndex},Tuple{Array{Union{Tuple{Int64,Int64}, Tuple{Int64,QuantumAlgebra.SymbolicIndex}},1},QuantumAlgebra.SpatialIndex}})
    Base.precompile(Tuple{typeof(<),Tuple{Array{Tuple{Int64,Int64},1},QuantumAlgebra.SpatialIndex},Tuple{Array{Tuple{Int64,Int64},1},QuantumAlgebra.SpatialIndex}})
    Base.precompile(Tuple{typeof(<),Tuple{Array{Tuple{Int64,QuantumAlgebra.SymbolicIndex},1},QuantumAlgebra.SpatialIndex},Tuple{Array{Tuple{Int64,QuantumAlgebra.SymbolicIndex},1},QuantumAlgebra.SpatialIndex}})
    Base.precompile(Tuple{typeof(<),Tuple{Array{Tuple{Int64,QuantumAlgebra.SymbolicIndex},1},QuantumAlgebra.SpatialIndex},Tuple{Array{Union{Tuple{Int64,Int64}, Tuple{Int64,QuantumAlgebra.SymbolicIndex}},1},QuantumAlgebra.SpatialIndex}})
    Base.precompile(Tuple{typeof(<),Tuple{Array{Union{Tuple{Int64,Int64}, Tuple{Int64,QuantumAlgebra.SymbolicIndex}},1},QuantumAlgebra.SpatialIndex},Tuple{Array{Tuple{Int64,Any},1},QuantumAlgebra.SpatialIndex}})
    Base.precompile(Tuple{typeof(<),Tuple{Array{Union{Tuple{Int64,Int64}, Tuple{Int64,QuantumAlgebra.SymbolicIndex}},1},QuantumAlgebra.SpatialIndex},Tuple{Array{Union{Tuple{Int64,Int64}, Tuple{Int64,QuantumAlgebra.SymbolicIndex}},1},QuantumAlgebra.SpatialIndex}})
    Base.precompile(Tuple{typeof(<),Tuple{Symbol,Array{Tuple{Int64,Any},1}},Tuple{Symbol,Array{Tuple{Int64,QuantumAlgebra.SymbolicIndex},1}}})
    Base.precompile(Tuple{typeof(<),Tuple{Symbol,Array{Tuple{Int64,Int64},1}},Tuple{Symbol,Array{Tuple{Int64,QuantumAlgebra.SymbolicIndex},1}}})
    Base.precompile(Tuple{typeof(<),Tuple{Symbol,Array{Tuple{Int64,QuantumAlgebra.SymbolicIndex},1}},Tuple{Symbol,Array{Tuple{Int64,Any},1}}})
    Base.precompile(Tuple{typeof(<),Tuple{Symbol,Array{Tuple{Int64,QuantumAlgebra.SymbolicIndex},1}},Tuple{Symbol,Array{Tuple{Int64,Int64},1}}})
    Base.precompile(Tuple{typeof(<),Tuple{Symbol,Array{Tuple{Int64,QuantumAlgebra.SymbolicIndex},1}},Tuple{Symbol,Array{Tuple{Int64,QuantumAlgebra.SymbolicIndex},1}}})
    Base.precompile(Tuple{typeof(<),Tuple{Symbol,Array{Tuple{Int64,QuantumAlgebra.SymbolicIndex},1}},Tuple{Symbol,Array{Union{Tuple{Int64,Int64}, Tuple{Int64,QuantumAlgebra.SymbolicIndex}},1}}})
    Base.precompile(Tuple{typeof(<),Tuple{Symbol,Array{Union{Tuple{Int64,Int64}, Tuple{Int64,QuantumAlgebra.SymbolicIndex}},1}},Tuple{Symbol,Array{Tuple{Int64,QuantumAlgebra.SymbolicIndex},1}}})
    Base.precompile(Tuple{typeof(<),Tuple{Tuple{Int64,Int64},Tuple{Int64,QuantumAlgebra.SymbolicIndex}},Tuple{Tuple{Int64,Int64},Tuple{Int64,QuantumAlgebra.SymbolicIndex}}})
    Base.precompile(Tuple{typeof(<),Tuple{Tuple{Int64,Int64},Tuple{Int64,QuantumAlgebra.SymbolicIndex}},Tuple{Tuple{Int64,QuantumAlgebra.SymbolicIndex},Tuple{Int64,QuantumAlgebra.SymbolicIndex}}})
    Base.precompile(Tuple{typeof(<),Tuple{Tuple{Int64,QuantumAlgebra.SymbolicIndex},Tuple{Int64,QuantumAlgebra.SymbolicIndex}},Tuple{Tuple{Int64,Int64},Tuple{Int64,QuantumAlgebra.SymbolicIndex}}})
    Base.precompile(Tuple{typeof(<),Tuple{Tuple{Int64,QuantumAlgebra.SymbolicIndex},Tuple{Int64,QuantumAlgebra.SymbolicIndex}},Tuple{Tuple{Int64,QuantumAlgebra.SymbolicIndex},Tuple{Int64,QuantumAlgebra.SymbolicIndex}}})
    Base.precompile(Tuple{typeof(<),Tuple{param,param,param},Tuple{param,param,param,δ}})
    Base.precompile(Tuple{typeof(<),Tuple{param,param,param},Tuple{param,param,param}})
    Base.precompile(Tuple{typeof(<),Tuple{param,param,δ},Tuple{param,param}})
    Base.precompile(Tuple{typeof(<),Tuple{param,param},Tuple{param,param,δ}})
    Base.precompile(Tuple{typeof(<),Tuple{param,δ},Tuple{param}})
    Base.precompile(Tuple{typeof(<),Tuple{param},Tuple{param}})
    Base.precompile(Tuple{typeof(<),Tuple{δ,δ},Tuple{δ}})
    Base.precompile(Tuple{typeof(<),Tuple{δ},Tuple{}})
    Base.precompile(Tuple{typeof(<),Tuple{δ},Tuple{δ,δ}})
    Base.precompile(Tuple{typeof(<),scal{Complex{Int64}},scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(==),Corr,ExpVal})
    Base.precompile(Tuple{typeof(==),Corr,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(==),Corr,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(==),Corr,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(==),ExpVal,Corr})
    Base.precompile(Tuple{typeof(==),ExpVal,ExpVal})
    Base.precompile(Tuple{typeof(==),ExpVal,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(==),ExpVal,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(==),ExpVal,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(==),ExpVal,QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(==),ExpVal,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(==),NTuple{4,param},NTuple{4,param}})
    Base.precompile(Tuple{typeof(==),NTuple{4,param},Tuple{param,param,param,param,δ}})
    Base.precompile(Tuple{typeof(==),NTuple{5,param},NTuple{5,param}})
    Base.precompile(Tuple{typeof(==),NTuple{5,param},Tuple{param,param,param,param,param,δ}})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.BosonCreate,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.BosonCreate,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.BosonCreate,δ})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.BosonDestroy,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.BosonDestroy,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.BosonDestroy,δ})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.FermionCreate,QuantumAlgebra.FermionCreate})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.FermionDestroy,QuantumAlgebra.FermionDestroy})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.OpProd,Corr})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.OpProd,OpSumAnalytic})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.OpProd,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.OpProd,scal{Int64}})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.σ,OpSumAnalytic})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.σ,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.σ,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.σ,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.σ,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.σminus,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.σplus,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(==),QuantumAlgebra.σplus,QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(==),Tuple{QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy},Tuple{QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy}})
    Base.precompile(Tuple{typeof(==),Tuple{QuantumAlgebra.BosonDestroy},Tuple{QuantumAlgebra.BosonDestroy}})
    Base.precompile(Tuple{typeof(==),Tuple{Tuple{scal{Int64},param,param},Tuple{ExpVal},Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.σplus}},Tuple{Tuple{scal{Int64},param,param},Tuple{ExpVal},Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.σplus}}})
    Base.precompile(Tuple{typeof(==),Tuple{Tuple{scal{Int64},param,param},Tuple{ExpVal},Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.σ}},Tuple{Tuple{scal{Int64},param,param},Tuple{ExpVal},Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.σ}}})
    Base.precompile(Tuple{typeof(==),Tuple{param,param,param,param,param,δ,δ},Tuple{param,param,param,param,param,δ,δ}})
    Base.precompile(Tuple{typeof(==),Tuple{param,param,param,param,param,δ},Tuple{param,param,param,param,param,δ}})
    Base.precompile(Tuple{typeof(==),Tuple{param,param,param,param,δ,δ},Tuple{param,param,param,param,δ,δ}})
    Base.precompile(Tuple{typeof(==),Tuple{param,param,param,param,δ},Tuple{param,param,param,param,δ}})
    Base.precompile(Tuple{typeof(==),Tuple{param,param,param,δ,δ},Tuple{param,param,param,δ,δ}})
    Base.precompile(Tuple{typeof(==),Tuple{param,param,param,δ},Tuple{param,param,param,δ}})
    Base.precompile(Tuple{typeof(==),Tuple{param,param,param},Tuple{param,param,param,δ}})
    Base.precompile(Tuple{typeof(==),Tuple{param,param,param},Tuple{param,param,param}})
    Base.precompile(Tuple{typeof(==),Tuple{param,param,δ,δ},Tuple{param,param,δ,δ}})
    Base.precompile(Tuple{typeof(==),Tuple{param,param,δ},Tuple{param,param,δ}})
    Base.precompile(Tuple{typeof(==),Tuple{param,param,δ},Tuple{param,param}})
    Base.precompile(Tuple{typeof(==),Tuple{param,param},Tuple{param,param,δ}})
    Base.precompile(Tuple{typeof(==),Tuple{param,param},Tuple{param,param}})
    Base.precompile(Tuple{typeof(==),Tuple{param,δ,δ},Tuple{param,δ,δ}})
    Base.precompile(Tuple{typeof(==),Tuple{param,δ},Tuple{param,δ}})
    Base.precompile(Tuple{typeof(==),Tuple{param,δ},Tuple{param}})
    Base.precompile(Tuple{typeof(==),Tuple{param},Tuple{param,δ}})
    Base.precompile(Tuple{typeof(==),Tuple{param},Tuple{param}})
    Base.precompile(Tuple{typeof(==),Tuple{},Tuple{δ}})
    Base.precompile(Tuple{typeof(==),Tuple{δ,δ},Tuple{δ,δ}})
    Base.precompile(Tuple{typeof(==),Tuple{δ,δ},Tuple{δ}})
    Base.precompile(Tuple{typeof(==),Tuple{δ},Tuple{}})
    Base.precompile(Tuple{typeof(==),Tuple{δ},Tuple{δ,δ}})
    Base.precompile(Tuple{typeof(==),Tuple{δ},Tuple{δ}})
    Base.precompile(Tuple{typeof(==),param,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(==),param,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(==),param,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(==),param,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(==),param,param})
    Base.precompile(Tuple{typeof(==),param,δ})
    Base.precompile(Tuple{typeof(==),scal{Complex{Int64}},QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(==),scal{Complex{Int64}},QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(==),scal{Complex{Int64}},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(==),scal{Complex{Int64}},QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(==),scal{Complex{Int64}},QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(==),scal{Complex{Int64}},QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(==),scal{Complex{Int64}},param})
    Base.precompile(Tuple{typeof(==),scal{Complex{Int64}},scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(==),scal{Complex{Int64}},scal{Int64}})
    Base.precompile(Tuple{typeof(==),scal{Complex{Int64}},δ})
    Base.precompile(Tuple{typeof(==),scal{Complex{Rational{Int64}}},QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(==),scal{Complex{Rational{Int64}}},QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(==),scal{Complex{Rational{Int64}}},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(==),scal{Complex{Rational{Int64}}},QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(==),scal{Complex{Rational{Int64}}},param})
    Base.precompile(Tuple{typeof(==),scal{Complex{Rational{Int64}}},scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(==),scal{Complex{Rational{Int64}}},scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(==),scal{Complex{Rational{Int64}}},scal{Int64}})
    Base.precompile(Tuple{typeof(==),scal{Complex{Rational{Int64}}},scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(==),scal{Complex{Rational{Int64}}},δ})
    Base.precompile(Tuple{typeof(==),scal{Float64},QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(==),scal{Float64},QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(==),scal{Float64},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(==),scal{Float64},scal{Float64}})
    Base.precompile(Tuple{typeof(==),scal{Float64},scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(==),scal{Float64},δ})
    Base.precompile(Tuple{typeof(==),scal{Int64},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(==),scal{Int64},scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(==),scal{Int64},scal{Float64}})
    Base.precompile(Tuple{typeof(==),scal{Int64},scal{Int64}})
    Base.precompile(Tuple{typeof(==),scal{Rational{Int64}},QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(==),scal{Rational{Int64}},QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(==),scal{Rational{Int64}},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(==),scal{Rational{Int64}},QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(==),scal{Rational{Int64}},scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(==),δ,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(==),δ,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(==),δ,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(==),δ,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(==),δ,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(==),δ,param})
    Base.precompile(Tuple{typeof(>),Corr,Corr})
    Base.precompile(Tuple{typeof(>),Corr,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(>),OpSumAnalytic,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(>),OpSumAnalytic,scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(>),OpSumAnalytic,scal{Int64}})
    Base.precompile(Tuple{typeof(>),QuantumAlgebra.OpProd,Corr})
    Base.precompile(Tuple{typeof(>),QuantumAlgebra.OpProd,OpSumAnalytic})
    Base.precompile(Tuple{typeof(>),QuantumAlgebra.OpProd,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(>),QuantumAlgebra.OpProd,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(>),QuantumAlgebra.OpProd,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(>),QuantumAlgebra.OpProd,QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(>),QuantumAlgebra.OpProd,QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(>),QuantumAlgebra.OpProd,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(>),QuantumAlgebra.OpProd,param})
    Base.precompile(Tuple{typeof(>),QuantumAlgebra.OpProd,scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(>),QuantumAlgebra.OpProd,scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(>),QuantumAlgebra.OpProd,scal{Float64}})
    Base.precompile(Tuple{typeof(>),QuantumAlgebra.OpProd,scal{Int64}})
    Base.precompile(Tuple{typeof(>),QuantumAlgebra.OpProd,scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(>),QuantumAlgebra.OpProd,δ})
    Base.precompile(Tuple{typeof(>),QuantumAlgebra.σ,OpSumAnalytic})
    Base.precompile(Tuple{typeof(>),QuantumAlgebra.σ,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(>),scal{Complex{Int64}},scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(>),scal{Int64},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(>),δ,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(Avac),OpSumAnalytic})
    Base.precompile(Tuple{typeof(Avac),QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(Avac),QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(Avac),QuantumAlgebra.FermionCreate})
    Base.precompile(Tuple{typeof(Avac),QuantumAlgebra.FermionDestroy})
    Base.precompile(Tuple{typeof(Avac),QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(Avac),QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(Avac),QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(Avac),QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(Avac),QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(Avac),scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(Avac),scal{Float64}})
    Base.precompile(Tuple{typeof(Avac),scal{Int64}})
    Base.precompile(Tuple{typeof(Avac),scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(Avac),δ})
    Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Base.Broadcast.Style{Tuple},Function,Tuple{Int64,QuantumAlgebra.SymbolicIndex}})
    Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Base.Broadcast.Style{Tuple},Function,Tuple{QuantumAlgebra.SymbolicIndex,QuantumAlgebra.SymbolicIndex}})
    Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Tuple{Tuple{param}},Tuple{Array{QuantumAlgebra.BaseOperator,1}},Array{Any,1}})
    Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Tuple{Tuple{scal{Int64},param}},Tuple{Array{QuantumAlgebra.BosonDestroy,1}},Array{Any,1}})
    Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Tuple{Tuple{scal{Int64},param}},Tuple{Array{QuantumAlgebra.σ,1}},Array{Any,1}})
    Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Tuple{Tuple{scal{Int64},param}},Tuple{Array{QuantumAlgebra.σplus,1}},Array{Any,1}})
    Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Tuple{Tuple{scal{Int64}}},Tuple{Array{QuantumAlgebra.BosonDestroy,1}},Array{Any,1}})
    Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.BaseOperator,1}},Array{Any,1}})
    Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.BosonDestroy,1}},Array{Any,1}})
    Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Function,Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.σ,1}},Array{Any,1}})
    Base.precompile(Tuple{typeof(Base.Broadcast.broadcasted),Type{T} where T,Array{QuantumAlgebra.BosonDestroy,1}})
    Base.precompile(Tuple{typeof(Base.Broadcast.combine_styles),Tuple{Int64,QuantumAlgebra.SymbolicIndex}})
    Base.precompile(Tuple{typeof(Base.Broadcast.combine_styles),Tuple{QuantumAlgebra.SymbolicIndex,QuantumAlgebra.SymbolicIndex}})
    Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Corr,1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.BaseOperator,1}},Base.Broadcast.Extruded{Array{Any,1},Tuple{Bool},Tuple{Int64}}}},Base.OneTo{Int64},Int64,Int64})
    Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Corr,1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.BosonDestroy,1}},Base.Broadcast.Extruded{Array{Any,1},Tuple{Bool},Tuple{Int64}}}},Base.OneTo{Int64},Int64,Int64})
    Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Corr,1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.σ,1}},Base.Broadcast.Extruded{Array{Any,1},Tuple{Bool},Tuple{Int64}}}},Base.OneTo{Int64},Int64,Int64})
    Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{QuantumAlgebra.OpProd,1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{param}},Tuple{Array{QuantumAlgebra.BaseOperator,1}},Base.Broadcast.Extruded{Array{Any,1},Tuple{Bool},Tuple{Int64}}}},Base.OneTo{Int64},Int64,Int64})
    Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{QuantumAlgebra.OpProd,1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{scal{Int64}}},Tuple{Array{QuantumAlgebra.BosonDestroy,1}},Base.Broadcast.Extruded{Array{Any,1},Tuple{Bool},Tuple{Int64}}}},Base.OneTo{Int64},Int64,Int64})
    Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Tuple{Int64,Int64},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra.sortsentinel),Tuple{Base.Broadcast.Extruded{Array{Union{Int64, QuantumAlgebra.SymbolicIndex},1},Tuple{Bool},Tuple{Int64}}}},Base.OneTo{Int64},Int64,Int64})
    Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Tuple{Int64,QuantumAlgebra.SymbolicIndex},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra.sortsentinel),Tuple{Base.Broadcast.Extruded{Array{Union{Int64, QuantumAlgebra.SymbolicIndex},1},Tuple{Bool},Tuple{Int64}}}},Base.OneTo{Int64},Int64,Int64})
    Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{scal{Int64},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},Type{δ},Tuple{Base.Broadcast.Extruded{Array{Union{Int64, QuantumAlgebra.SymbolicIndex},1},Tuple{Bool},Tuple{Int64}},Base.Broadcast.Extruded{Array{Union{Int64, QuantumAlgebra.SymbolicIndex},1},Tuple{Bool},Tuple{Int64}}}},Base.OneTo{Int64},Int64,Int64})
    Base.precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{δ,1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},Type{δ},Tuple{Base.Broadcast.Extruded{Array{Union{Int64, QuantumAlgebra.SymbolicIndex},1},Tuple{Bool},Tuple{Int64}},Base.Broadcast.Extruded{Array{Union{Int64, QuantumAlgebra.SymbolicIndex},1},Tuple{Bool},Tuple{Int64}}}},Base.OneTo{Int64},Int64,Int64})
    Base.precompile(Tuple{typeof(Base.Broadcast.instantiate),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{param}},Tuple{Array{QuantumAlgebra.BaseOperator,1}},Array{Any,1}}}})
    Base.precompile(Tuple{typeof(Base.Broadcast.instantiate),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{scal{Int64},param}},Tuple{Array{QuantumAlgebra.BosonDestroy,1}},Array{Any,1}}}})
    Base.precompile(Tuple{typeof(Base.Broadcast.instantiate),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{scal{Int64},param}},Tuple{Array{QuantumAlgebra.σ,1}},Array{Any,1}}}})
    Base.precompile(Tuple{typeof(Base.Broadcast.instantiate),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{scal{Int64},param}},Tuple{Array{QuantumAlgebra.σplus,1}},Array{Any,1}}}})
    Base.precompile(Tuple{typeof(Base.Broadcast.instantiate),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{scal{Int64}}},Tuple{Array{QuantumAlgebra.BosonDestroy,1}},Array{Any,1}}}})
    Base.precompile(Tuple{typeof(Base.Broadcast.instantiate),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.BaseOperator,1}},Array{Any,1}}}})
    Base.precompile(Tuple{typeof(Base.Broadcast.instantiate),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.BosonDestroy,1}},Array{Any,1}}}})
    Base.precompile(Tuple{typeof(Base.Broadcast.instantiate),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.σ,1}},Array{Any,1}}}})
    Base.precompile(Tuple{typeof(Base.Broadcast.instantiate),Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple},Nothing,typeof(QuantumAlgebra.make_index),Tuple{Tuple{Int64,Int64,Symbol}}}})
    Base.precompile(Tuple{typeof(Base.Broadcast.instantiate),Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple},Nothing,typeof(QuantumAlgebra.make_index),Tuple{Tuple{Symbol,Symbol,Int64}}}})
    Base.precompile(Tuple{typeof(Base.Broadcast.instantiate),Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple},Nothing,typeof(QuantumAlgebra.sortsentinel),Tuple{Tuple{Int64,QuantumAlgebra.SymbolicIndex}}}})
    Base.precompile(Tuple{typeof(Base.Broadcast.instantiate),Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple},Nothing,typeof(QuantumAlgebra.sortsentinel),Tuple{Tuple{QuantumAlgebra.SymbolicIndex,QuantumAlgebra.SymbolicIndex}}}})
    Base.precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,Type{ExpVal},Tuple{Array{QuantumAlgebra.BosonDestroy,1}}}})
    Base.precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!),Array{QuantumAlgebra.Operator,1},Array{Corr,1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.BaseOperator,1}},Base.Broadcast.Extruded{Array{Any,1},Tuple{Bool},Tuple{Int64}}}},QuantumAlgebra.OpProd,Int64,Base.OneTo{Int64},Int64,Int64})
    Base.precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!),Array{QuantumAlgebra.Operator,1},Array{Corr,1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.BosonDestroy,1}},Base.Broadcast.Extruded{Array{Any,1},Tuple{Bool},Tuple{Int64}}}},QuantumAlgebra.OpProd,Int64,Base.OneTo{Int64},Int64,Int64})
    Base.precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!),Array{QuantumAlgebra.Operator,1},Array{Corr,1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.σ,1}},Base.Broadcast.Extruded{Array{Any,1},Tuple{Bool},Tuple{Int64}}}},QuantumAlgebra.OpProd,Int64,Base.OneTo{Int64},Int64,Int64})
    Base.precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!),Array{Tuple{Int64,Any},1},Array{Tuple{Int64,Int64},1},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra.sortsentinel),Tuple{Base.Broadcast.Extruded{Array{Union{Int64, QuantumAlgebra.SymbolicIndex},1},Tuple{Bool},Tuple{Int64}}}},Tuple{Int64,QuantumAlgebra.SymbolicIndex},Int64,Base.OneTo{Int64},Int64,Int64})
    Base.precompile(Tuple{typeof(Base.Iterators.filter),Function,QuantumAlgebra.OpProdIter{true}})
    Base.precompile(Tuple{typeof(Base.__cat),Array{Union{Int64, QuantumAlgebra.SymbolicIndex},1},Tuple{Int64},Tuple{Bool},QuantumAlgebra.SymbolicIndex,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base._compute_eltype),Type{Tuple{Int64,Int64,QuantumAlgebra.SymbolicIndex}}})
    Base.precompile(Tuple{typeof(Base._compute_eltype),Type{Tuple{Int64,QuantumAlgebra.SymbolicIndex}}})
    Base.precompile(Tuple{typeof(Base._compute_eltype),Type{Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.σ}}})
    Base.precompile(Tuple{typeof(Base._compute_eltype),Type{Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy}}})
    Base.precompile(Tuple{typeof(Base._compute_eltype),Type{Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.σ}}})
    Base.precompile(Tuple{typeof(Base._compute_eltype),Type{Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy}}})
    Base.precompile(Tuple{typeof(Base._compute_eltype),Type{Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.σ}}})
    Base.precompile(Tuple{typeof(Base._compute_eltype),Type{Tuple{QuantumAlgebra.SymbolicIndex,Int64,QuantumAlgebra.SymbolicIndex}}})
    Base.precompile(Tuple{typeof(Base._compute_eltype),Type{Tuple{QuantumAlgebra.SymbolicIndex,QuantumAlgebra.SymbolicIndex,Int64}}})
    Base.precompile(Tuple{typeof(Base._compute_eltype),Type{Tuple{QuantumAlgebra.σplus,QuantumAlgebra.σminus}}})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpProd,ExpVal,QuantumAlgebra.σ,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpProd,ExpVal,QuantumAlgebra.σplus,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpProd,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpProd,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpProd,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpProd,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpProd,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpProd,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpProd,QuantumAlgebra.σ,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpProd,QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpProd,QuantumAlgebra.σplus,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpProd,QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpProd,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpProd,param,param,param,param})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpProd,param,param,param})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpProd,param,param})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpProd,param})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpSum,Corr})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpSum,ExpVal,Corr})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpSum,QuantumAlgebra.BosonCreate,ExpVal,Corr})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpSum,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate,QuantumAlgebra.σ,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpSum,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpSum,QuantumAlgebra.BosonCreate,QuantumAlgebra.σ,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpSum,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpSum,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate,ExpVal,Corr})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpSum,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpSum,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpSum,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpSum,QuantumAlgebra.σ,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate,QuantumAlgebra.σ,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpSum,QuantumAlgebra.σ,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(*),QuantumAlgebra.OpSum,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(+),QuantumAlgebra.OpSum,QuantumAlgebra.OpProd,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(Base.afoldl),typeof(+),QuantumAlgebra.OpSum,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(Base.allocatedinline),Type{QuantumAlgebra.Operator}})
    Base.precompile(Tuple{typeof(Base.allocatedinline),Type{QuantumAlgebra.SymbolicIndex}})
    Base.precompile(Tuple{typeof(Base.allocatedinline),Type{scal{Int64}}})
    Base.precompile(Tuple{typeof(Base.allocatedinline),Type{δ}})
    Base.precompile(Tuple{typeof(Base.argtail),ExpVal,ExpVal,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.argtail),param,ExpVal,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.argtail),scal{Int64},ExpVal,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.argtail),scal{Int64},param,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{Corr,Nothing},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{Corr,QuantumAlgebra.OpProd},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{Corr,QuantumAlgebra.σplus},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{Corr,QuantumAlgebra.σ},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{ExpVal,Corr},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{ExpVal,ExpVal},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{ExpVal,Nothing},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{ExpVal,QuantumAlgebra.OpProd},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.BosonCreate,Nothing},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.OpProd},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.σminus},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.σplus},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.σ},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.BosonDestroy,Nothing},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.BosonDestroy,QuantumAlgebra.OpProd},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.BosonDestroy,QuantumAlgebra.σminus},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.BosonDestroy,QuantumAlgebra.σplus},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.BosonDestroy,QuantumAlgebra.σ},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.FermionCreate,Nothing},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.FermionCreate,QuantumAlgebra.FermionCreate},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.FermionCreate,QuantumAlgebra.FermionDestroy},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.FermionDestroy,Nothing},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.FermionDestroy,QuantumAlgebra.FermionDestroy},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.OpProd,QuantumAlgebra.OpSum},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.OpProd,scal{Int64}},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.σ,Nothing},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.σ,QuantumAlgebra.OpProd},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.σ,QuantumAlgebra.σ},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.σminus,Nothing},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.σplus,Nothing},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{QuantumAlgebra.σplus,QuantumAlgebra.σminus},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{param,QuantumAlgebra.BosonCreate},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{param,QuantumAlgebra.BosonDestroy},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{param,QuantumAlgebra.OpProd},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{param,QuantumAlgebra.σ},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{scal{Int64},scal{Int64}},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{δ,QuantumAlgebra.BosonCreate},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{δ,QuantumAlgebra.BosonDestroy},Int64})
    Base.precompile(Tuple{typeof(Base.indexed_iterate),Tuple{δ,QuantumAlgebra.OpProd},Int64})
    Base.precompile(Tuple{typeof(Base.mul_prod),scal{Int64},scal{Int64}})
    Base.precompile(Tuple{typeof(Base.mul_prod),δ,δ})
    Base.precompile(Tuple{typeof(Base.print_to_string),Corr,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.print_to_string),ExpVal,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.print_to_string),QuantumAlgebra.BosonCreate,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.print_to_string),QuantumAlgebra.BosonDestroy,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.print_to_string),QuantumAlgebra.OpProd,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.print_to_string),scal{Int64},Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.promote_typeof),QuantumAlgebra.BosonCreate,QuantumAlgebra.σ,Vararg{QuantumAlgebra.σ,N} where N})
    Base.precompile(Tuple{typeof(Base.promote_typeof),QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.promote_typeof),QuantumAlgebra.OpProd,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(Base.promote_typeof),QuantumAlgebra.σ,QuantumAlgebra.σ,Vararg{QuantumAlgebra.σ,N} where N})
    Base.precompile(Tuple{typeof(Base.promote_typeof),Tuple{QuantumAlgebra.OpProd,QuantumAlgebra.OpSum},Tuple{QuantumAlgebra.OpProd,scal{Int64}}})
    Base.precompile(Tuple{typeof(Base.promote_typeof),Tuple{scal{Int64},scal{Int64}},Tuple{QuantumAlgebra.OpProd,QuantumAlgebra.OpSum},Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.promote_typeof),scal{Int64},QuantumAlgebra.OpProd,Vararg{QuantumAlgebra.OpProd,N} where N})
    Base.precompile(Tuple{typeof(Base.revargs),param,param,Vararg{param,N} where N})
    Base.precompile(Tuple{typeof(Base.revargs),param,param})
    Base.precompile(Tuple{typeof(Base.revargs),param})
    Base.precompile(Tuple{typeof(Base.revargs),δ,param,Vararg{param,N} where N})
    Base.precompile(Tuple{typeof(Base.revargs),δ,param})
    Base.precompile(Tuple{typeof(Base.revargs),δ,δ,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.revargs),δ,δ})
    Base.precompile(Tuple{typeof(Base.revargs),δ})
    Base.precompile(Tuple{typeof(Base.vect),QuantumAlgebra.BosonDestroy,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.vect),QuantumAlgebra.OpProd,Vararg{QuantumAlgebra.OpProd,N} where N})
    Base.precompile(Tuple{typeof(Base.vect),Tuple{scal{Int64},scal{Int64}},Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(Base.vect),scal{Int64},Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(CorrOrExp),QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(CorrOrExp),QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sortedOpProd),Corr,Corr})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sortedOpProd),Corr})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sortedOpProd),ExpVal,Corr,Vararg{Corr,N} where N})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sortedOpProd),ExpVal,Corr})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sortedOpProd),ExpVal,ExpVal,Vararg{QuantumAlgebra.Operator,N} where N})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sortedOpProd),param,Corr})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sortedOpProd),param,ExpVal,Vararg{QuantumAlgebra.Operator,N} where N})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sortedOpProd),scal{Int64},Corr})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sortedOpProd),scal{Int64},ExpVal,Vararg{QuantumAlgebra.Operator,N} where N})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sortedOpSum),Array{QuantumAlgebra.OpProd,1}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sortedOpSum),Array{QuantumAlgebra.Operator,1}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{param},Array{QuantumAlgebra.BaseOperator,1},Tuple{Tuple{Int64,Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{param},Array{QuantumAlgebra.BaseOperator,1},Tuple{Tuple{Int64},Tuple{Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{param},Array{QuantumAlgebra.BaseOperator,1},Tuple{Tuple{Int64},Tuple{Int64},Tuple{Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{scal{Int64},param},Array{QuantumAlgebra.BosonDestroy,1},Tuple{Tuple{Int64,Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{scal{Int64},param},Array{QuantumAlgebra.BosonDestroy,1},Tuple{Tuple{Int64},Tuple{Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{scal{Int64},param},Array{QuantumAlgebra.BosonDestroy,1},Tuple{Tuple{Int64},Tuple{Int64},Tuple{Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{scal{Int64},param},Array{QuantumAlgebra.σ,1},Tuple{Tuple{Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{scal{Int64},param},Array{QuantumAlgebra.σplus,1},Tuple{Tuple{Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{scal{Int64}},Array{QuantumAlgebra.BosonDestroy,1},Tuple{Tuple{Int64,Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{scal{Int64}},Array{QuantumAlgebra.BosonDestroy,1},Tuple{Tuple{Int64},Tuple{Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{scal{Int64}},Array{QuantumAlgebra.BosonDestroy,1},Tuple{Tuple{Int64},Tuple{Int64},Tuple{Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{scal{Int64}},Array{QuantumAlgebra.BosonDestroy,1},Tuple{Tuple{Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BaseOperator,1},NTuple{4,Tuple{Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BaseOperator,1},Tuple{NTuple{4,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BaseOperator,1},Tuple{Tuple{Int64,Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BaseOperator,1},Tuple{Tuple{Int64,Int64},Tuple{Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BaseOperator,1},Tuple{Tuple{Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BaseOperator,1},Tuple{Tuple{Int64},Tuple{Int64,Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BaseOperator,1},Tuple{Tuple{Int64},Tuple{Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BaseOperator,1},Tuple{Tuple{Int64},Tuple{Int64},Tuple{Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BaseOperator,1},Tuple{Tuple{Int64},Tuple{Int64},Tuple{Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BaseOperator,1},Tuple{Tuple{Int64},Tuple{Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BosonDestroy,1},NTuple{4,Tuple{Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BosonDestroy,1},NTuple{5,Tuple{Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BosonDestroy,1},Tuple{NTuple{4,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BosonDestroy,1},Tuple{NTuple{5,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BosonDestroy,1},Tuple{Tuple{Int64,Int64},Tuple{Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BosonDestroy,1},Tuple{Tuple{Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BosonDestroy,1},Tuple{Tuple{Int64},NTuple{4,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BosonDestroy,1},Tuple{Tuple{Int64},Tuple{Int64,Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BosonDestroy,1},Tuple{Tuple{Int64},Tuple{Int64,Int64},Tuple{Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BosonDestroy,1},Tuple{Tuple{Int64},Tuple{Int64},Tuple{Int64,Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BosonDestroy,1},Tuple{Tuple{Int64},Tuple{Int64},Tuple{Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BosonDestroy,1},Tuple{Tuple{Int64},Tuple{Int64},Tuple{Int64},Tuple{Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.BosonDestroy,1},Tuple{Tuple{Int64},Tuple{Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.σ,1},Tuple{Tuple{Int64,Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._sumterm),Tuple{},Array{QuantumAlgebra.σ,1},Tuple{Tuple{Int64},Tuple{Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._vacExpVal),OpSumAnalytic})
    Base.precompile(Tuple{typeof(QuantumAlgebra._vacExpVal),QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(QuantumAlgebra._vacExpVal),QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(QuantumAlgebra._vacExpVal),QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(QuantumAlgebra._vacExpVal),scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._vacExpVal),scal{Float64}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._vacExpVal),scal{Int64}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._vacExpVal),scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(QuantumAlgebra._vacExpVal),δ})
    Base.precompile(Tuple{typeof(QuantumAlgebra.basetype),Type{T} where T})
    Base.precompile(Tuple{typeof(QuantumAlgebra.combinable),Corr,Corr})
    Base.precompile(Tuple{typeof(QuantumAlgebra.combinable),Corr,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(QuantumAlgebra.combinable),QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(QuantumAlgebra.exchange_inds),QuantumAlgebra.OpProd,QuantumAlgebra.SymbolicIndex,QuantumAlgebra.SymbolicIndex})
    Base.precompile(Tuple{typeof(QuantumAlgebra.exptuple),ExpVal})
    Base.precompile(Tuple{typeof(QuantumAlgebra.exptuple),QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(QuantumAlgebra.exptuple),QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(QuantumAlgebra.exptuple),QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(QuantumAlgebra.exptuple),QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(QuantumAlgebra.exptuple),QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(QuantumAlgebra.exptuple),param})
    Base.precompile(Tuple{typeof(QuantumAlgebra.exptuple),scal{Int64}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.extindices),OpSumAnalytic})
    Base.precompile(Tuple{typeof(QuantumAlgebra.iterlesseq),QuantumAlgebra.OpProdIter{false},QuantumAlgebra.OpProdIter{false}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.optuple),ExpVal})
    Base.precompile(Tuple{typeof(QuantumAlgebra.optuple),QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(QuantumAlgebra.optuple),QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(QuantumAlgebra.optuple),QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(QuantumAlgebra.optuple),QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(QuantumAlgebra.optuple),QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(QuantumAlgebra.optuple),param})
    Base.precompile(Tuple{typeof(QuantumAlgebra.optuple),scal{Int64}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.parse_paramstr),String})
    Base.precompile(Tuple{typeof(QuantumAlgebra.preftuple),ExpVal})
    Base.precompile(Tuple{typeof(QuantumAlgebra.preftuple),QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(QuantumAlgebra.preftuple),QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(QuantumAlgebra.preftuple),QuantumAlgebra.FermionCreate})
    Base.precompile(Tuple{typeof(QuantumAlgebra.preftuple),QuantumAlgebra.FermionDestroy})
    Base.precompile(Tuple{typeof(QuantumAlgebra.preftuple),QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(QuantumAlgebra.preftuple),QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(QuantumAlgebra.preftuple),QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(QuantumAlgebra.preftuple),param})
    Base.precompile(Tuple{typeof(QuantumAlgebra.preftuple),scal{Int64}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.preftuple),δ})
    Base.precompile(Tuple{typeof(QuantumAlgebra.prodcorr),Tuple{ExpVal,ExpVal},Tuple{}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.prodcorr),Tuple{param},Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.prodcorr),Tuple{scal{Int64},param},Tuple{QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.prodcorr),Tuple{scal{Int64},param},Tuple{QuantumAlgebra.σplus}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.prodcorr),Tuple{scal{Int64},param},Tuple{QuantumAlgebra.σ}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.prodcorr),Tuple{scal{Int64},param},Tuple{}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.prodcorr),Tuple{scal{Int64}},Tuple{QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.prodcorr),Tuple{scal{Int64}},Tuple{QuantumAlgebra.BosonDestroy}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.prodcorr),Tuple{},NTuple{4,QuantumAlgebra.BosonDestroy}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.prodcorr),Tuple{},NTuple{5,QuantumAlgebra.BosonDestroy}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.prodcorr),Tuple{},Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.σ}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.prodcorr),Tuple{},Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy,QuantumAlgebra.σ}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.prodcorr),Tuple{},Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.prodcorr),Tuple{},Tuple{QuantumAlgebra.BosonCreate,QuantumAlgebra.σ}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.prodcorr),Tuple{},Tuple{QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonDestroy}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.prodcorr),Tuple{},Tuple{QuantumAlgebra.σ,QuantumAlgebra.σ}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.prodcorr),Tuple{},Tuple{QuantumAlgebra.σplus,QuantumAlgebra.σminus}})
    Base.precompile(Tuple{typeof(QuantumAlgebra.replace_index),Corr,QuantumAlgebra.SymbolicIndex,QuantumAlgebra.SymbolicIndex})
    Base.precompile(Tuple{typeof(QuantumAlgebra.replace_index),ExpVal,QuantumAlgebra.SymbolicIndex,QuantumAlgebra.SymbolicIndex})
    Base.precompile(Tuple{typeof(QuantumAlgebra.replace_index),OpSumAnalytic,QuantumAlgebra.SymbolicIndex,QuantumAlgebra.SymbolicIndex})
    Base.precompile(Tuple{typeof(QuantumAlgebra.replace_index),QuantumAlgebra.OpProd,QuantumAlgebra.SymbolicIndex,Int64})
    Base.precompile(Tuple{typeof(QuantumAlgebra.replace_index),QuantumAlgebra.OpProd,QuantumAlgebra.SymbolicIndex,QuantumAlgebra.SymbolicIndex})
    Base.precompile(Tuple{typeof(QuantumAlgebra.replace_index),QuantumAlgebra.OpSum,QuantumAlgebra.SymbolicIndex,QuantumAlgebra.SymbolicIndex})
    Base.precompile(Tuple{typeof(QuantumAlgebra.separate_prefac),Corr})
    Base.precompile(Tuple{typeof(QuantumAlgebra.sumindices),Corr})
    Base.precompile(Tuple{typeof(QuantumAlgebra.sumindices),ExpVal})
    Base.precompile(Tuple{typeof(QuantumAlgebra.sumindices),QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(QuantumAlgebra.sumindices),QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(QuantumAlgebra.sumindices),QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(QuantumAlgebra.sumindices),QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(QuantumAlgebra.sumindices),QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(QuantumAlgebra.sumindices),QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(QuantumAlgebra.symmetric_index_nums),QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(QuantumAlgebra.use_σpm),Bool})
    Base.precompile(Tuple{typeof(adjoint),Corr})
    Base.precompile(Tuple{typeof(adjoint),ExpVal})
    Base.precompile(Tuple{typeof(adjoint),OpSumAnalytic})
    Base.precompile(Tuple{typeof(adjoint),QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(adjoint),QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(adjoint),QuantumAlgebra.FermionCreate})
    Base.precompile(Tuple{typeof(adjoint),QuantumAlgebra.FermionDestroy})
    Base.precompile(Tuple{typeof(adjoint),QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(adjoint),QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(adjoint),QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(adjoint),QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(adjoint),param})
    Base.precompile(Tuple{typeof(adjoint),scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(adjoint),scal{Float64}})
    Base.precompile(Tuple{typeof(ascorr),Corr})
    Base.precompile(Tuple{typeof(ascorr),OpSumAnalytic})
    Base.precompile(Tuple{typeof(ascorr),QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(ascorr),QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(ascorr),QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(ascorr),QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(ascorr),scal{Int64}})
    Base.precompile(Tuple{typeof(collect),Tuple{Int64,Int64,QuantumAlgebra.SymbolicIndex}})
    Base.precompile(Tuple{typeof(collect),Tuple{QuantumAlgebra.SymbolicIndex,QuantumAlgebra.SymbolicIndex,Int64}})
    Base.precompile(Tuple{typeof(collect),Type{QuantumAlgebra.Operator},Array{Union{scal{Int64}, δ},1}})
    Base.precompile(Tuple{typeof(collect),Type{QuantumAlgebra.Operator},Array{scal{Int64},1}})
    Base.precompile(Tuple{typeof(collect),Type{QuantumAlgebra.Operator},Array{δ,1}})
    Base.precompile(Tuple{typeof(comm),OpSumAnalytic,OpSumAnalytic})
    Base.precompile(Tuple{typeof(comm),OpSumAnalytic,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(comm),OpSumAnalytic,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(comm),OpSumAnalytic,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(comm),OpSumAnalytic,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(comm),OpSumAnalytic,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(comm),OpSumAnalytic,param})
    Base.precompile(Tuple{typeof(comm),OpSumAnalytic,scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.BosonCreate,OpSumAnalytic})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.BosonCreate,QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.BosonCreate,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.BosonCreate,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.BosonCreate,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.BosonCreate,scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.BosonDestroy,OpSumAnalytic})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.BosonDestroy,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.BosonDestroy,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.BosonDestroy,QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.BosonDestroy,scal{Rational{Int64}}})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.FermionCreate,QuantumAlgebra.FermionDestroy})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.FermionDestroy,QuantumAlgebra.FermionCreate})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.OpProd,OpSumAnalytic})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.OpProd,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.OpProd,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.OpProd,param})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.OpSum,QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.OpSum,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.OpSum,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.OpSum,param})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.σ,OpSumAnalytic})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.σ,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.σ,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.σ,param})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.σ,scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.σ,scal{Int64}})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.σminus,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.σminus,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.σplus,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(comm),QuantumAlgebra.σplus,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(comm),param,OpSumAnalytic})
    Base.precompile(Tuple{typeof(comm),param,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(comm),param,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(comm),scal{Complex{Int64}},OpSumAnalytic})
    Base.precompile(Tuple{typeof(comm),scal{Complex{Int64}},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(comm),scal{Complex{Rational{Int64}}},OpSumAnalytic})
    Base.precompile(Tuple{typeof(comm),scal{Complex{Rational{Int64}}},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(comm),scal{Complex{Rational{Int64}}},QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(comm),scal{Float64},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(comm),scal{Float64},δ})
    Base.precompile(Tuple{typeof(comm),scal{Int64},OpSumAnalytic})
    Base.precompile(Tuple{typeof(comm),scal{Int64},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(comm),scal{Rational{Int64}},OpSumAnalytic})
    Base.precompile(Tuple{typeof(comm),scal{Rational{Int64}},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(comm),scal{Rational{Int64}},QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(comm),δ,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{param}},Tuple{Array{QuantumAlgebra.BaseOperator,1}},Array{Any,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{scal{Int64},param}},Tuple{Array{QuantumAlgebra.BosonDestroy,1}},Array{Any,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{scal{Int64},param}},Tuple{Array{QuantumAlgebra.σ,1}},Array{Any,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{scal{Int64},param}},Tuple{Array{QuantumAlgebra.σplus,1}},Array{Any,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{scal{Int64}}},Tuple{Array{QuantumAlgebra.BosonDestroy,1}},Array{Any,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.BaseOperator,1}},Array{Any,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.BosonDestroy,1}},Array{Any,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.σ,1}},Array{Any,1}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple},Nothing,typeof(QuantumAlgebra.make_index),Tuple{Tuple{Int64,Int64,Symbol}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple},Nothing,typeof(QuantumAlgebra.make_index),Tuple{Tuple{Symbol,Symbol,Int64}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple},Nothing,typeof(QuantumAlgebra.sortsentinel),Tuple{Tuple{Int64,QuantumAlgebra.SymbolicIndex}}}})
    Base.precompile(Tuple{typeof(copy),Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple},Nothing,typeof(QuantumAlgebra.sortsentinel),Tuple{Tuple{QuantumAlgebra.SymbolicIndex,QuantumAlgebra.SymbolicIndex}}}})
    Base.precompile(Tuple{typeof(copyto!),Array{QuantumAlgebra.BaseOperator,1},Tuple{QuantumAlgebra.BosonDestroy,QuantumAlgebra.BosonCreate,QuantumAlgebra.σ,QuantumAlgebra.σ,QuantumAlgebra.σ}})
    Base.precompile(Tuple{typeof(copyto!),Array{QuantumAlgebra.Operator,1},Tuple{scal{Int64},QuantumAlgebra.OpProd,QuantumAlgebra.OpProd}})
    Base.precompile(Tuple{typeof(copyto!),Array{Tuple{QuantumAlgebra.Operator,QuantumAlgebra.Operator},1},Tuple{Tuple{scal{Int64},scal{Int64}},Tuple{QuantumAlgebra.OpProd,QuantumAlgebra.OpSum},Tuple{QuantumAlgebra.OpProd,scal{Int64}}}})
    Base.precompile(Tuple{typeof(distribute_indices!),Array{Symbol,1},Corr})
    Base.precompile(Tuple{typeof(distribute_indices!),Array{Symbol,1},ExpVal})
    Base.precompile(Tuple{typeof(distribute_indices!),Array{Symbol,1},QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(distribute_indices!),Array{Symbol,1},QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(distribute_indices!),Array{Symbol,1},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(distribute_indices!),Array{Symbol,1},QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(distribute_indices!),Array{Symbol,1},QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(distribute_indices!),Array{Symbol,1},QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(distribute_indices!),Array{Symbol,1},QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(distribute_indices!),Array{Symbol,1},param})
    Base.precompile(Tuple{typeof(getindex),Array{ExpVal,1},Int64})
    Base.precompile(Tuple{typeof(isapprox),QuantumAlgebra.OpProd,QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(isapprox),QuantumAlgebra.OpSum,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(isapprox),scal{Float64},scal{Float64}})
    Base.precompile(Tuple{typeof(isapprox),scal{Float64},scal{Int64}})
    Base.precompile(Tuple{typeof(isapprox),δ,δ})
    Base.precompile(Tuple{typeof(isless),ExpVal,Corr})
    Base.precompile(Tuple{typeof(isless),ExpVal,ExpVal})
    Base.precompile(Tuple{typeof(iterate),Array{QuantumAlgebra.BaseOperator,1}})
    Base.precompile(Tuple{typeof(iterate),Array{QuantumAlgebra.OpProd,1}})
    Base.precompile(Tuple{typeof(iterate),Array{QuantumAlgebra.Operator,1}})
    Base.precompile(Tuple{typeof(iterate),Array{Tuple{QuantumAlgebra.Operator,QuantumAlgebra.Operator},1}})
    Base.precompile(Tuple{typeof(iterate),QuantumAlgebra.OpProdIter{false},ExpVal})
    Base.precompile(Tuple{typeof(iterate),QuantumAlgebra.OpProdIter{false},QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(iterate),QuantumAlgebra.OpProdIter{false},QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(iterate),QuantumAlgebra.OpProdIter{false},QuantumAlgebra.FermionCreate})
    Base.precompile(Tuple{typeof(iterate),QuantumAlgebra.OpProdIter{false},QuantumAlgebra.FermionDestroy})
    Base.precompile(Tuple{typeof(iterate),QuantumAlgebra.OpProdIter{false},QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(iterate),QuantumAlgebra.OpProdIter{false},QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(iterate),QuantumAlgebra.OpProdIter{true},Corr})
    Base.precompile(Tuple{typeof(iterate),QuantumAlgebra.OpProdIter{true},ExpVal})
    Base.precompile(Tuple{typeof(iterate),QuantumAlgebra.OpProdIter{true},QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(latex),Corr})
    Base.precompile(Tuple{typeof(latex),ExpVal})
    Base.precompile(Tuple{typeof(latex),OpSumAnalytic})
    Base.precompile(Tuple{typeof(latex),QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(latex),QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(latex),QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(latex),QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(latex),QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(latex),QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(latex),param})
    Base.precompile(Tuple{typeof(latex),scal{Complex{Int64}}})
    Base.precompile(Tuple{typeof(latex),scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(latex),scal{Float64}})
    Base.precompile(Tuple{typeof(latex),scal{Int64}})
    Base.precompile(Tuple{typeof(latex),δ})
    Base.precompile(Tuple{typeof(length),Corr})
    Base.precompile(Tuple{typeof(length),ExpVal})
    Base.precompile(Tuple{typeof(length),QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(length),QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(length),QuantumAlgebra.FermionCreate})
    Base.precompile(Tuple{typeof(length),QuantumAlgebra.FermionDestroy})
    Base.precompile(Tuple{typeof(length),QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(length),QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(length),QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(length),param})
    Base.precompile(Tuple{typeof(length),δ})
    Base.precompile(Tuple{typeof(make_indices),Int64,Int64,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(make_indices),Int64,Symbol})
    Base.precompile(Tuple{typeof(make_indices),Symbol,Int64,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(make_indices),Symbol,Symbol,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(print),Base.GenericIOBuffer{Array{UInt8,1}},Corr})
    Base.precompile(Tuple{typeof(print),Base.GenericIOBuffer{Array{UInt8,1}},ExpVal})
    Base.precompile(Tuple{typeof(print),Base.GenericIOBuffer{Array{UInt8,1}},OpSumAnalytic})
    Base.precompile(Tuple{typeof(print),Base.GenericIOBuffer{Array{UInt8,1}},QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(print),Base.GenericIOBuffer{Array{UInt8,1}},QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(print),Base.GenericIOBuffer{Array{UInt8,1}},QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(print),Base.GenericIOBuffer{Array{UInt8,1}},QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(print),Base.GenericIOBuffer{Array{UInt8,1}},QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(print),Base.GenericIOBuffer{Array{UInt8,1}},QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(print),Base.GenericIOBuffer{Array{UInt8,1}},scal{Int64}})
    Base.precompile(Tuple{typeof(prod),Array{QuantumAlgebra.Operator,1}})
    Base.precompile(Tuple{typeof(prodtuple),QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(prodtuple),QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(prodtuples),QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(promote_type),Type{QuantumAlgebra.BosonDestroy},Type{QuantumAlgebra.BaseOperator}})
    Base.precompile(Tuple{typeof(promote_type),Type{Tuple{scal{Int64},scal{Int64}}},Type{Tuple{QuantumAlgebra.OpProd,QuantumAlgebra.Operator}}})
    Base.precompile(Tuple{typeof(setindex!),Array{Corr,1},Corr,Int64})
    Base.precompile(Tuple{typeof(setindex!),Array{Union{Int64, QuantumAlgebra.SymbolicIndex},1},QuantumAlgebra.SymbolicIndex,Int64})
    Base.precompile(Tuple{typeof(show),Base.GenericIOBuffer{Array{UInt8,1}},String,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(similar),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.BaseOperator,1}},Base.Broadcast.Extruded{Array{Any,1},Tuple{Bool},Tuple{Int64}}}},Type{Corr}})
    Base.precompile(Tuple{typeof(similar),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.BosonDestroy,1}},Base.Broadcast.Extruded{Array{Any,1},Tuple{Bool},Tuple{Int64}}}},Type{Corr}})
    Base.precompile(Tuple{typeof(similar),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Tuple{Base.OneTo{Int64}},typeof(QuantumAlgebra._sumterm),Tuple{Tuple{Tuple{}},Tuple{Array{QuantumAlgebra.σ,1}},Base.Broadcast.Extruded{Array{Any,1},Tuple{Bool},Tuple{Int64}}}},Type{Corr}})
    Base.precompile(Tuple{typeof(string),Corr,String,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(string),ExpVal,String,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(string),QuantumAlgebra.BosonCreate,String,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(string),QuantumAlgebra.BosonDestroy,String,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(string),QuantumAlgebra.OpProd,String,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(string),QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(string),String,QuantumAlgebra.SpatialIndex,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(string),String,QuantumAlgebra.SymbolicIndex,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(string),scal{Int64},String,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(sumtuple),QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(sumtuple),QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(vacA),OpSumAnalytic})
    Base.precompile(Tuple{typeof(vacA),QuantumAlgebra.BosonCreate})
    Base.precompile(Tuple{typeof(vacA),QuantumAlgebra.BosonDestroy})
    Base.precompile(Tuple{typeof(vacA),QuantumAlgebra.FermionCreate})
    Base.precompile(Tuple{typeof(vacA),QuantumAlgebra.FermionDestroy})
    Base.precompile(Tuple{typeof(vacA),QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(vacA),QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(vacA),QuantumAlgebra.σminus})
    Base.precompile(Tuple{typeof(vacA),QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(vacA),QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(vacA),scal{Complex{Rational{Int64}}}})
    Base.precompile(Tuple{typeof(vacA),scal{Float64}})
    Base.precompile(Tuple{typeof(vacA),scal{Int64}})
    Base.precompile(Tuple{typeof(vacA),δ})
    Base.precompile(Tuple{typeof(vacExpVal),OpSumAnalytic})
    Base.precompile(Tuple{typeof(vacExpVal),QuantumAlgebra.OpProd,QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(vacExpVal),QuantumAlgebra.OpProd})
    Base.precompile(Tuple{typeof(vacExpVal),QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(vacExpVal),QuantumAlgebra.σplus})
    Base.precompile(Tuple{typeof(vacExpVal),QuantumAlgebra.σ})
    Base.precompile(Tuple{typeof(vacExpVal),scal{Int64},QuantumAlgebra.OpSum})
    Base.precompile(Tuple{typeof(vcat),QuantumAlgebra.SymbolicIndex,Array{Union{Int64, QuantumAlgebra.SymbolicIndex},1}})
    Base.precompile(Tuple{typeof(σm),Int64,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(σm),Int64})
    Base.precompile(Tuple{typeof(σm),Symbol,Vararg{Symbol,N} where N})
    Base.precompile(Tuple{typeof(σm),Symbol})
    Base.precompile(Tuple{typeof(σm),Tuple{Symbol,Symbol}})
    Base.precompile(Tuple{typeof(σm)})
    Base.precompile(Tuple{typeof(σp),Int64})
    Base.precompile(Tuple{typeof(σp),Symbol})
    Base.precompile(Tuple{typeof(σp),Tuple{Symbol,Symbol}})
    Base.precompile(Tuple{typeof(σp)})
    Base.precompile(Tuple{typeof(σx),Int64})
    Base.precompile(Tuple{typeof(σx),Symbol,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(σx),Symbol})
    Base.precompile(Tuple{typeof(σx),Tuple{Symbol,Symbol}})
    Base.precompile(Tuple{typeof(σx)})
    Base.precompile(Tuple{typeof(σy),Int64})
    Base.precompile(Tuple{typeof(σy),Symbol,Vararg{Symbol,N} where N})
    Base.precompile(Tuple{typeof(σy),Symbol})
    Base.precompile(Tuple{typeof(σy)})
    Base.precompile(Tuple{typeof(σz),Int64,Vararg{Any,N} where N})
    Base.precompile(Tuple{typeof(σz),Int64})
    Base.precompile(Tuple{typeof(σz),Symbol,Vararg{Symbol,N} where N})
    Base.precompile(Tuple{typeof(σz),Symbol})
    Base.precompile(Tuple{typeof(σz)})
end
