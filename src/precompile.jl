# Use
#    @warnpcfail precompile(args...)
# if you want to be warned when a precompile directive fails
macro warnpcfail(ex::Expr)
    modl = __module__
    file = __source__.file === nothing ? "?" : String(__source__.file)
    line = __source__.line
    quote
        $(esc(ex)) || @warn """precompile directive
     $($(Expr(:quote, ex)))
 failed. Please report an issue in $($modl) (after checking for duplicates) or remove this directive.""" _file=$file _line=$line
    end
end


function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    Base.precompile(Tuple{Type{replace_inds},Pair{OpIndex, OpIndex},Vararg{Pair{OpIndex, OpIndex}, N} where N})
    Base.precompile(Tuple{typeof(*),Complex{Int64},OpSum})
    Base.precompile(Tuple{typeof(*),Complex{Rational{Int64}},OpSum})
    Base.precompile(Tuple{typeof(*),OpSum,Int64})
    Base.precompile(Tuple{typeof(*),OpSum,OpSum})
    Base.precompile(Tuple{typeof(+),Int64,OpSum})
    Base.precompile(Tuple{typeof(+),OpSum,Complex{Rational{Int64}}})
    Base.precompile(Tuple{typeof(+),OpSum,Float64})
    Base.precompile(Tuple{typeof(+),OpSum,Int64})
    Base.precompile(Tuple{typeof(+),OpSum,OpSum})
    Base.precompile(Tuple{typeof(+),Rational{Int64},OpSum})
    Base.precompile(Tuple{typeof(-),Int64,OpSum})
    Base.precompile(Tuple{typeof(-),OpSum,Int64})
    Base.precompile(Tuple{typeof(==),OpSum,OpSum})
    Base.precompile(Tuple{typeof(Avac),OpSum})
    Base.precompile(Tuple{typeof(CorrTup_isless),NTuple{4, Int64},Tuple{Int64, Int64}})
    Base.precompile(Tuple{typeof(CorrTup_isless),NTuple{6, Int64},Tuple{Int64, Int64, Int64}})
    Base.precompile(Tuple{typeof(CorrTup_isless),NTuple{8, Int64},NTuple{4, Int64}})
    Base.precompile(Tuple{typeof(_add_corrs!),OpSum,OpTerm,Int64,typeof(_add_with_normal_order!)})
    Base.precompile(Tuple{typeof(_add_sum_term!),OpSum,OpTerm,ComplexF64,ComplexF64})
    Base.precompile(Tuple{typeof(_add_sum_term!),OpSum,OpTerm,ComplexF64,Float64})
    Base.precompile(Tuple{typeof(_add_sum_term!),OpSum,OpTerm,Complex{Int64},Complex{Int64}})
    Base.precompile(Tuple{typeof(_add_sum_term!),OpSum,OpTerm,Complex{Int64},Int64})
    Base.precompile(Tuple{typeof(_add_sum_term!),OpSum,OpTerm,Complex{Int64},Rational{Int64}})
    Base.precompile(Tuple{typeof(_add_sum_term!),OpSum,OpTerm,Complex{Rational{Int64}},Complex{Rational{Int64}}})
    Base.precompile(Tuple{typeof(_add_sum_term!),OpSum,OpTerm,Complex{Rational{Int64}},Int64})
    Base.precompile(Tuple{typeof(_add_sum_term!),OpSum,OpTerm,Complex{Rational{Int64}},Rational{Int64}})
    Base.precompile(Tuple{typeof(_add_sum_term!),OpSum,OpTerm,Float64,Float64})
    Base.precompile(Tuple{typeof(_add_sum_term!),OpSum,OpTerm,Int64,Int64})
    Base.precompile(Tuple{typeof(_add_sum_term!),OpSum,OpTerm,Int64,Rational{Int64}})
    Base.precompile(Tuple{typeof(_add_sum_term!),OpSum,OpTerm,Rational{Int64},Int64})
    Base.precompile(Tuple{typeof(_add_sum_term!),OpSum,OpTerm,Rational{Int64},Rational{Int64}})
    Base.precompile(Tuple{typeof(_add_sum_term!),OpSum,OpTerm,Rational{Int64}})
    Base.precompile(Tuple{typeof(adjoint),OpSum})
    Base.precompile(Tuple{typeof(boson_ops),Symbol})
    Base.precompile(Tuple{typeof(comm),OpSum,OpSum})
    Base.precompile(Tuple{typeof(corr),OpSum})
    Base.precompile(Tuple{typeof(expval_as_corrs),OpSum})
    Base.precompile(Tuple{typeof(fermion_ops),Symbol})
    Base.precompile(Tuple{typeof(isapprox),OpSum,OpSum})
    Base.precompile(Tuple{typeof(isempty),OpTerm})
    Base.precompile(Tuple{typeof(julia_expression),OpSum})
    Base.precompile(Tuple{typeof(julia_expression),Param,Nothing})
    Base.precompile(Tuple{typeof(latex),Complex{Rational{Int64}}})
    Base.precompile(Tuple{typeof(latex),Float64})
    Base.precompile(Tuple{typeof(latex),Int64})
    Base.precompile(Tuple{typeof(latex),OpSum})
    Base.precompile(Tuple{typeof(latex),OpTerm})
    Base.precompile(Tuple{typeof(latex),Rational{Int64}})
    Base.precompile(Tuple{typeof(make_indices),Int64,Int64,Vararg{Any, N} where N})
    Base.precompile(Tuple{typeof(make_indices),Int64,Symbol,Vararg{Any, N} where N})
    Base.precompile(Tuple{typeof(make_indices),Int64,Symbol})
    Base.precompile(Tuple{typeof(make_indices),Symbol,Int64,Vararg{Any, N} where N})
    Base.precompile(Tuple{typeof(make_indices),Symbol,Int64})
    Base.precompile(Tuple{typeof(make_indices),Symbol,String})
    Base.precompile(Tuple{typeof(make_indices),Symbol,Symbol,Vararg{Any, N} where N})
    Base.precompile(Tuple{typeof(normal_form),OpSum})
    Base.precompile(Tuple{typeof(param),Symbol,Char,Int64,Vararg{Any, N} where N})
    Base.precompile(Tuple{typeof(param),Symbol,Char,Int64})
    Base.precompile(Tuple{typeof(param),Symbol,Char,Symbol,Vararg{Any, N} where N})
    Base.precompile(Tuple{typeof(param),Symbol,Char,Tuple{}})
    Base.precompile(Tuple{typeof(param),Symbol,Char,Vector{Any}})
    Base.precompile(Tuple{typeof(param),Symbol,Char,Vector{Int64}})
    Base.precompile(Tuple{typeof(param),Symbol,Char,Vector{Symbol}})
    Base.precompile(Tuple{typeof(param),Symbol,Char})
    Base.precompile(Tuple{typeof(parse_paramstr),String})
    Base.precompile(Tuple{typeof(print),IOBuffer,BaseOperator})
    Base.precompile(Tuple{typeof(print),IOBuffer,Corr})
    Base.precompile(Tuple{typeof(print_term_scalar),IOBuffer,OpTerm,Complex{Int64},Bool})
    Base.precompile(Tuple{typeof(print_term_scalar),IOBuffer,OpTerm,Int64,Bool})
    Base.precompile(Tuple{typeof(print_term_scalar),IOBuffer,OpTerm,Rational{Int64},Bool})
    Base.precompile(Tuple{typeof(show),IOBuffer,MIME{Symbol("text/latex")},OpSum})
    Base.precompile(Tuple{typeof(simplify_number),Rational{Int64}})
    Base.precompile(Tuple{typeof(symmetric_index_nums),OpSum})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,NTuple{4, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,NTuple{4, Tuple{Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,NTuple{5, Tuple{Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,NTuple{6, Tuple{Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,NTuple{7, Tuple{Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,NTuple{8, Tuple{Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,NTuple{9, Tuple{Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{NTuple{4, Int64}, NTuple{4, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{NTuple{4, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{NTuple{5, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{NTuple{6, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{NTuple{7, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{NTuple{8, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{NTuple{9, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64, Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, NTuple{4, Int64}, NTuple{4, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, NTuple{4, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, NTuple{5, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, NTuple{6, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, NTuple{7, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, NTuple{8, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64, Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, NTuple{4, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, NTuple{5, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, NTuple{6, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, NTuple{7, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, NTuple{4, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, NTuple{5, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, NTuple{6, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, NTuple{4, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, NTuple{5, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, NTuple{4, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64}, Tuple{Int64, Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}, Tuple{Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}, Tuple{Int64}}})
    Base.precompile(Tuple{typeof(term2corr),OpTerm,Tuple{Tuple{Int64}}})
    Base.precompile(Tuple{typeof(use_σpm),Bool})
    Base.precompile(Tuple{typeof(vacA),OpSum})
    Base.precompile(Tuple{typeof(vacExpVal),OpSum,OpSum})
    Base.precompile(Tuple{typeof(vacExpVal),OpSum})
    Base.precompile(Tuple{typeof(σm),Int64})
    Base.precompile(Tuple{typeof(σm),Symbol})
    Base.precompile(Tuple{typeof(σm),Tuple{Symbol, Symbol}})
    Base.precompile(Tuple{typeof(σm)})
    Base.precompile(Tuple{typeof(σp),Int64})
    Base.precompile(Tuple{typeof(σp),Symbol})
    Base.precompile(Tuple{typeof(σp),Tuple{Symbol, Symbol}})
    Base.precompile(Tuple{typeof(σp)})
    Base.precompile(Tuple{typeof(σx),Int64})
    Base.precompile(Tuple{typeof(σx),Symbol,Vararg{Any, N} where N})
    Base.precompile(Tuple{typeof(σx),Symbol})
    Base.precompile(Tuple{typeof(σx),Tuple{Symbol, Symbol}})
    Base.precompile(Tuple{typeof(σx)})
    Base.precompile(Tuple{typeof(σy),Int64})
    Base.precompile(Tuple{typeof(σy),Symbol,Vararg{Symbol, N} where N})
    Base.precompile(Tuple{typeof(σy),Symbol})
    Base.precompile(Tuple{typeof(σy)})
    Base.precompile(Tuple{typeof(σz),Int64})
    Base.precompile(Tuple{typeof(σz),Symbol,Vararg{Symbol, N} where N})
    Base.precompile(Tuple{typeof(σz),Symbol})
    Base.precompile(Tuple{typeof(σz)})
    Base.precompile(Tuple{typeof(∑),Symbol,OpSum})
    isdefined(QuantumAlgebra, Symbol("#21#22")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#21#22")),Vector{δ},Vararg{Vector{δ}, N} where N})
    isdefined(QuantumAlgebra, Symbol("#53#54")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#53#54")),Tuple{OpTerm, Complex{Rational{Int64}}}})
    isdefined(QuantumAlgebra, Symbol("#53#54")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#53#54")),Tuple{OpTerm, Rational{Int64}}})
    isdefined(QuantumAlgebra, Symbol("#ann#5")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#ann#5")),Int64,Vararg{Any, N} where N})
    isdefined(QuantumAlgebra, Symbol("#ann#5")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#ann#5")),Int64})
    isdefined(QuantumAlgebra, Symbol("#ann#5")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#ann#5")),String})
    isdefined(QuantumAlgebra, Symbol("#ann#5")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#ann#5")),Symbol,Vararg{Symbol, N} where N})
    isdefined(QuantumAlgebra, Symbol("#ann#5")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#ann#5")),Symbol})
    isdefined(QuantumAlgebra, Symbol("#ann#5")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#ann#5"))})
    isdefined(QuantumAlgebra, Symbol("#ann#7")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#ann#7")),Int64})
    isdefined(QuantumAlgebra, Symbol("#ann#7")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#ann#7")),Symbol})
    isdefined(QuantumAlgebra, Symbol("#ann#7")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#ann#7"))})
    isdefined(QuantumAlgebra, Symbol("#cre#6")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#cre#6")),Int64,Vararg{Any, N} where N})
    isdefined(QuantumAlgebra, Symbol("#cre#6")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#cre#6")),Int64})
    isdefined(QuantumAlgebra, Symbol("#cre#6")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#cre#6")),Symbol,Vararg{Symbol, N} where N})
    isdefined(QuantumAlgebra, Symbol("#cre#6")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#cre#6")),Symbol})
    isdefined(QuantumAlgebra, Symbol("#cre#6")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#cre#6"))})
    isdefined(QuantumAlgebra, Symbol("#cre#8")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#cre#8")),Symbol})
    isdefined(QuantumAlgebra, Symbol("#cre#8")) && Base.precompile(Tuple{getfield(QuantumAlgebra, Symbol("#cre#8"))})
end
